<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>üé≠ Playwright Framework - Quick Test Job</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>BROWSER</name>
          <description>Browser to test with</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>chromium</string>
              <string>firefox</string>
              <string>webkit</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_SAMPLE_APP</name>
          <description>Start sample applications for testing</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TEST_PATTERN</name>
          <description>Test pattern to run (e.g., tests/e2e/auth.spec.ts)</description>
          <defaultValue>tests/e2e/auth.spec.ts</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

echo "üé≠ ===== PLAYWRIGHT TEST EXECUTION ====="
echo "üïê Started at: $(date)"
echo "üåê Browser: $BROWSER"
echo "üéØ Test Pattern: $TEST_PATTERN"
echo "üöÄ Sample Apps: $RUN_SAMPLE_APP"
echo "==============================================="

# Navigate to framework directory
cd /var/jenkins_home/playwright-framework || {
    echo "‚ùå Error: Framework directory not found!"
    exit 1
}

echo "üìÇ Current directory: $(pwd)"
echo "üìã Directory contents:"
ls -la

# Setup environment
export CI=true
export NODE_OPTIONS="--max-old-space-size=4096"

# Check Node and npm
echo "üì¶ Node version: $(node --version)"
echo "üì¶ NPM version: $(npm --version)"

# Install dependencies
echo "üì¶ Installing dependencies..."
if [ -f "package.json" ]; then
    npm install || npm ci || echo "‚ö†Ô∏è Using existing node_modules"
else
    echo "‚ùå package.json not found!"
    exit 1
fi

# Install Playwright browsers
echo "üé≠ Installing Playwright browsers..."
npx playwright install chromium || echo "‚ö†Ô∏è Browser installation failed, using existing"

# Verify Playwright installation
echo "üé≠ Playwright version:"
npx playwright --version

# List available tests
echo "üìã Available tests:"
find tests -name "*.spec.ts" -type f | head -10

# Start sample applications if requested
if [ "$RUN_SAMPLE_APP" = "true" ]; then
    echo "üöÄ Starting sample applications..."
    
    # Create logs directory
    mkdir -p logs
    
    # Kill any existing processes
    echo "üßπ Cleaning existing processes..."
    pkill -f "sample" || true
    pkill -f "node.*3000" || true
    pkill -f "node.*3001" || true
    sleep 3
    
    # Check if package.json has sample scripts
    if grep -q "sample:web" package.json && grep -q "sample:api" package.json; then
        echo "‚úÖ Sample scripts found in package.json"
        
        # Start sample web app in background
        echo "üåê Starting web app on port 3000..."
        nohup npm run sample:web > logs/sample-web.log 2>&1 &
        WEB_PID=$!
        echo $WEB_PID > logs/sample-web.pid
        
        # Start sample API in background  
        echo "üîå Starting API on port 3001..."
        nohup npm run sample:api > logs/sample-api.log 2>&1 &
        API_PID=$!
        echo $API_PID > logs/sample-api.pid
        
        # Wait for apps to start
        echo "‚è≥ Waiting for applications to start..."
        sleep 20
        
        # Check if apps are running
        echo "üîç Checking application status..."
        if curl -s --max-time 5 http://localhost:3000 > /dev/null; then
            echo "‚úÖ Web app is running on port 3000"
        else
            echo "‚ö†Ô∏è Web app not responding on port 3000"
            echo "--- Web app log ---"
            tail -20 logs/sample-web.log 2>/dev/null || echo "No web app log"
        fi
        
        if curl -s --max-time 5 http://localhost:3001/health > /dev/null; then
            echo "‚úÖ API is running on port 3001"  
        else
            echo "‚ö†Ô∏è API not responding on port 3001"
            echo "--- API log ---"
            tail -20 logs/sample-api.log 2>/dev/null || echo "No API log"
        fi
        
        # Show running processes
        echo "üîç Running Node processes:"
        ps aux | grep node | grep -v grep || echo "No Node processes found"
        
    else
        echo "‚ö†Ô∏è Sample scripts not found in package.json"
        echo "Available npm scripts:"
        npm run 2>&1 | grep -A 50 "available via"
    fi
else
    echo "‚è≠Ô∏è Skipping sample app startup (RUN_SAMPLE_APP=false)"
fi

# Run Playwright tests
echo ""
echo "üß™ ===== RUNNING PLAYWRIGHT TESTS ====="
echo "üéØ Test Pattern: $TEST_PATTERN"
echo "üåê Browser: $BROWSER"

# Create test results directory
mkdir -p test-results
mkdir -p playwright-report

# Check if test file exists
if [ -f "$TEST_PATTERN" ]; then
    echo "‚úÖ Test file found: $TEST_PATTERN"
else
    echo "‚ö†Ô∏è Test file not found: $TEST_PATTERN"
    echo "Available test files:"
    find tests -name "*.spec.ts" -type f | head -5
    echo "Trying with first available test..."
    TEST_PATTERN=$(find tests -name "*.spec.ts" -type f | head -1)
    echo "Using: $TEST_PATTERN"
fi

# Run tests
echo "üöÄ Executing tests..."
npx playwright test "$TEST_PATTERN" \
    --project="$BROWSER" \
    --reporter=html,json,junit \
    --output-dir=test-results \
    --workers=1 \
    --retries=1 \
    --timeout=30000

TEST_EXIT_CODE=$?

# Show results
echo ""
echo "üìä ===== TEST RESULTS ====="
echo "Exit code: $TEST_EXIT_CODE"

if [ -d "test-results" ]; then
    echo "üìÅ Test results directory contents:"
    find test-results -type f | head -10
else
    echo "‚ùå No test results directory found"
fi

if [ -d "playwright-report" ]; then
    echo "üìÅ Playwright report directory contents:"
    find playwright-report -type f | head -10
else
    echo "‚ùå No Playwright report directory found"
fi

# Show sample app logs if available
if [ "$RUN_SAMPLE_APP" = "true" ] && [ -d "logs" ]; then
    echo ""
    echo "üìã ===== SAMPLE APP LOGS ====="
    echo "--- Web App Log (last 10 lines) ---"
    tail -10 logs/sample-web.log 2>/dev/null || echo "No web app log available"
    echo ""
    echo "--- API Log (last 10 lines) ---"
    tail -10 logs/sample-api.log 2>/dev/null || echo "No API log available"
fi

# Cleanup sample apps
if [ "$RUN_SAMPLE_APP" = "true" ]; then
    echo ""
    echo "üßπ Cleaning up sample applications..."
    if [ -f "logs/sample-web.pid" ]; then
        kill $(cat logs/sample-web.pid) 2>/dev/null || true
        rm logs/sample-web.pid
    fi
    if [ -f "logs/sample-api.pid" ]; then  
        kill $(cat logs/sample-api.pid) 2>/dev/null || true
        rm logs/sample-api.pid
    fi
    pkill -f "sample" || true
    pkill -f "node.*3000" || true
    pkill -f "node.*3001" || true
fi

echo ""
echo "üé≠ ===== PLAYWRIGHT TEST COMPLETED ====="
echo "üïê Completed at: $(date)"
echo "üìä Final exit code: $TEST_EXIT_CODE"
echo "=============================================="

exit $TEST_EXIT_CODE</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>test-results/**/*,playwright-report/**/*,logs/**/*</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
      <followSymlinks>false</followSymlinks>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.junit.JunitResultArchiver>
      <testResults>test-results/**/junit.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>true</allowEmptyResults>
    </hudson.tasks.junit.JunitResultArchiver>
  </publishers>
  <buildWrappers/>
</project>