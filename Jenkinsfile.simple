pipeline {pipeline {

    agent any    agent any

        

    parameters {    tools {

        choice(        nodejs "nodejs" // This will be configured in Jenkins Global Tools

            name: 'TEST_TYPE',    }

            choices: ['smoke-only', 'unit-tests', 'framework-validation'],    

            description: 'Type of tests to run'    parameters {

        )        choice(

    }            name: 'BROWSER',

                choices: ['chromium', 'firefox', 'webkit'],

    environment {            description: 'Browser to run tests on'

        NODE_ENV = 'test'        )

        CI = 'true'        booleanParam(

    }            name: 'HEADLESS',

                defaultValue: true,

    stages {            description: 'Run tests in headless mode'

        stage('Checkout') {        )

            steps {    }

                echo 'üì• Checking out source code'    

                checkout scm    environment {

                sh 'pwd && ls -la'        NODE_ENV = 'test'

            }        CI = 'true'

        }    }

            

        stage('Install Dependencies') {    stages {

            steps {        stage('Checkout') {

                echo 'üì¶ Installing Node.js dependencies only'            steps {

                sh '''                echo 'üì• Checking out source code'

                    node --version                checkout scm

                    npm --version            }

                    npm ci        }

                '''        

            }        stage('Setup') {

        }            steps {

                        echo 'üì¶ Installing dependencies'

        stage('Framework Validation') {                sh '''

            steps {                    echo "Node version:"

                script {                    node --version

                    echo "üß™ Running framework validation - ${params.TEST_TYPE}"                    echo "NPM version:"

                                        npm --version

                    sh '''                    

                        echo "Testing framework structure..."                    echo "Installing dependencies..."

                                            npm ci

                        # Check if critical files exist                    

                        test -f package.json && echo "‚úÖ package.json exists"                    echo "Installing Playwright browsers..."

                        test -f playwright.config.ts && echo "‚úÖ playwright.config.ts exists"                    npx playwright install

                        test -d tests && echo "‚úÖ tests directory exists"                '''

                        test -d utils && echo "‚úÖ utils directory exists"            }

                                }

                        # Test TypeScript compilation        

                        echo "Checking TypeScript compilation..."        stage('Run Tests') {

                        npx tsc --noEmit --project tsconfig.json            steps {

                        echo "‚úÖ TypeScript compilation successful"                echo "üß™ Running Playwright tests with ${params.BROWSER} browser"

                                        sh '''

                        # Test basic Node.js functionality                    if [ "${BROWSER}" = "chromium" ]; then

                        node -e "console.log('‚úÖ Node.js execution works')"                        npx playwright test --project=chromium

                                            elif [ "${BROWSER}" = "firefox" ]; then

                        # Test package imports (without running actual tests)                        npx playwright test --project=firefox

                        node -e "                    elif [ "${BROWSER}" = "webkit" ]; then

                            try {                        npx playwright test --project=webkit

                                require('@playwright/test');                    else

                                console.log('‚úÖ Playwright package loads correctly');                        npx playwright test

                            } catch(e) {                    fi

                                console.log('‚ùå Playwright package error:', e.message);                '''

                                process.exit(1);            }

                            }        }

                        "    }

                            

                        echo "üéâ All framework validation tests passed!"    post {

                    '''        always {

                }            echo 'üìä Archiving test results'

            }            archiveArtifacts artifacts: 'playwright-report/**/*', allowEmptyArchive: true

        }            archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true

    }            

                // Publish test results if available

    post {            script {

        always {                if (fileExists('test-results/results.xml')) {

            echo 'üìä Build completed - Framework validation approach'                    publishTestResults testResultsPattern: 'test-results/results.xml'

            archiveArtifacts artifacts: 'package*.json', allowEmptyArchive: true                }

        }            }

        success {        }

            echo '‚úÖ Framework validation pipeline succeeded!'        failure {

        }            echo 'üí• Build failed'

        failure {        }

            echo '‚ùå Framework validation pipeline failed'        success {

        }            echo '‚úÖ Build successful'

        cleanup {        }

            echo 'üßΩ Cleaning up'        cleanup {

            cleanWs()            echo 'üßΩ Cleaning up workspace'

        }            cleanWs()

    }        }

}    }
}