pipeline {
    agent any
    
    parameters {
        choice(
            name: 'BROWSER',
            choices: ['chromium', 'firefox', 'webkit'],
            description: 'Browser to run tests on'
        )
        booleanParam(
            name: 'HEADLESS',
            defaultValue: true,
            description: 'Run tests in headless mode'
        )
    }
    
    environment {
        NODE_VERSION = '18'
        HEADLESS = "${params.HEADLESS}"
        CI = 'true'
        BROWSER = "${params.BROWSER}"
        TEST_SUITE = "${params.TEST_SUITE}"
        ENVIRONMENT = "${params.ENVIRONMENT}"
        WORKERS = "${params.PARALLEL_EXECUTION ? '4' : '1'}"
        
        // Dynamic environment URLs
        BASE_URL = "${params.ENVIRONMENT == 'production' ? 'https://prod.yourapp.com' : params.ENVIRONMENT == 'staging' ? 'https://staging.yourapp.com' : 'http://localhost:3000'}"
        API_BASE_URL = "${params.ENVIRONMENT == 'production' ? 'https://api.prod.yourapp.com' : params.ENVIRONMENT == 'staging' ? 'https://api.staging.yourapp.com' : 'http://localhost:3001'}"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 1, unit: 'HOURS')
        retry(1)
        parallelsAlwaysFailFast()
    }
    
    stages {
        stage('üèóÔ∏è Checkout & Setup') {
            parallel {
                stage('Checkout Code') {
                    steps {
                        checkout scm
                        echo "üìÅ Code checked out from branch: ${env.BRANCH_NAME}"
                        echo "üîó Commit: ${env.GIT_COMMIT}"
                    }
                }
                stage('Environment Info') {
                    steps {
                        script {
                            echo """
                            üéØ Build Configuration:
                            ‚îú‚îÄ‚îÄ Browser: ${params.BROWSER}
                            ‚îú‚îÄ‚îÄ Test Suite: ${params.TEST_SUITE}
                            ‚îú‚îÄ‚îÄ Environment: ${params.ENVIRONMENT}
                            ‚îú‚îÄ‚îÄ Headless: ${params.HEADLESS}
                            ‚îú‚îÄ‚îÄ Parallel: ${params.PARALLEL_EXECUTION}
                            ‚îú‚îÄ‚îÄ Base URL: ${env.BASE_URL}
                            ‚îî‚îÄ‚îÄ API URL: ${env.API_BASE_URL}
                            """
                        }
                    }
                }
            }
        }
        
        stage('üîß Dependencies & Setup') {
            steps {
                script {
                    echo 'üì¶ Installing dependencies and browsers'
                    sh '''
                        node --version
                        npm --version
                        npm ci --prefer-offline --no-audit
                        npm run install:browsers
                        npx playwright --version
                    '''
                }
            }
        }
        
        stage('üîç Code Quality') {
            parallel {
                stage('Lint Check') {
                    steps {
                        echo 'üßπ Running ESLint'
                        sh 'npm run lint'
                    }
                    post {
                        always {
                            publishLint pattern: 'eslint-results.xml'
                        }
                    }
                }
                stage('Type Check') {
                    steps {
                        echo 'üî§ Running TypeScript type check'
                        sh 'npm run type-check'
                    }
                }
                stage('Security Scan') {
                    steps {
                        echo 'üõ°Ô∏è Running security audit'
                        sh 'npm audit --audit-level=high || true'
                    }
                }
            }
        }
        
        stage('üéÆ Test Environment Setup') {
            when {
                expression { params.ENVIRONMENT == 'development' }
            }
            steps {
                script {
                    echo 'üöÄ Starting local test applications'
                    sh '''
                        # Start sample applications in background
                        npm run start:apps > /dev/null 2>&1 &
                        APP_PID=$!
                        echo $APP_PID > app.pid
                        
                        # Wait for applications to be ready
                        echo "‚è≥ Waiting for applications to start..."
                        sleep 15
                        
                        # Health check
                        curl -f http://localhost:3000 || exit 1
                        curl -f http://localhost:3001/health || exit 1
                        echo "‚úÖ Applications are ready"
                    '''
                }
            }
        }
        
        stage('üß™ Test Execution') {
            parallel {
                stage('üö® Smoke Tests') {
                    when {
                        anyOf {
                            expression { params.TEST_SUITE == 'all' }
                            expression { params.TEST_SUITE == 'smoke' }
                        }
                    }
                    steps {
                        script {
                            echo 'üí® Running smoke tests'
                            def browserFlag = params.BROWSER != 'all' ? "--project=${params.BROWSER}" : ""
                            sh """
                                npm run test:smoke ${browserFlag} \
                                --reporter=html,junit,json \
                                --workers=${env.WORKERS}
                            """
                        }
                    }
                }
                
                stage('üåê E2E Tests') {
                    when {
                        anyOf {
                            expression { params.TEST_SUITE == 'all' }
                            expression { params.TEST_SUITE == 'e2e' }
                        }
                    }
                    steps {
                        script {
                            echo 'üé≠ Running end-to-end tests'
                            def browserFlag = params.BROWSER != 'all' ? "--project=${params.BROWSER}" : ""
                            sh """
                                npm run test:e2e ${browserFlag} \
                                --reporter=html,junit,json \
                                --workers=${env.WORKERS}
                            """
                        }
                    }
                }
                
                stage('üîå API Tests') {
                    when {
                        anyOf {
                            expression { params.TEST_SUITE == 'all' }
                            expression { params.TEST_SUITE == 'api' }
                        }
                    }
                    steps {
                        script {
                            echo 'üîó Running API tests'
                            sh """
                                npm run test:api \
                                --reporter=html,junit,json \
                                --workers=${env.WORKERS}
                            """
                        }
                    }
                }
                
                stage('üîÑ Regression Tests') {
                    when {
                        anyOf {
                            expression { params.TEST_SUITE == 'all' }
                            expression { params.TEST_SUITE == 'regression' }
                            expression { env.BRANCH_NAME == 'main' }
                        }
                    }
                    steps {
                        script {
                            echo 'üîç Running regression tests'
                            def browserFlag = params.BROWSER != 'all' ? "--project=${params.BROWSER}" : ""
                            sh """
                                npm run test:regression ${browserFlag} \
                                --reporter=html,junit,json \
                                --workers=${env.WORKERS}
                            """
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        // Collect test results
                        publishTestResults testResultsPattern: 'test-results/junit.xml'
                        
                        // Archive test artifacts
                        archiveArtifacts artifacts: '''
                            test-results/**/*,
                            playwright-report/**/*,
                            logs/**/*,
                            allure-results/**/*
                        ''', allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('üìä Report Generation') {
            parallel {
                stage('HTML Reports') {
                    steps {
                        echo 'üìÑ Publishing HTML reports'
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'playwright-report',
                            reportFiles: 'index.html',
                            reportName: 'Playwright Test Report',
                            reportTitles: 'Test Execution Report'
                        ])
                    }
                }
                
                stage('Allure Reports') {
                    steps {
                        script {
                            echo 'üìà Generating Allure reports'
                            sh 'npm run report:allure || true'
                            allure([
                                includeProperties: false,
                                jdk: '',
                                properties: [],
                                reportBuildPolicy: 'ALWAYS',
                                results: [[path: 'allure-results']]
                            ])
                        }
                    }
                }
                
                stage('Performance Reports') {
                    steps {
                        script {
                            echo '‚ö° Analyzing performance metrics'
                            sh '''
                                # Extract performance data from test results
                                node -e "
                                const fs = require('fs');
                                const results = JSON.parse(fs.readFileSync('test-results/results.json', 'utf8'));
                                const performance = results.suites.map(suite => ({
                                    name: suite.title,
                                    duration: suite.tests.reduce((sum, test) => sum + test.results[0].duration, 0)
                                }));
                                fs.writeFileSync('performance-report.json', JSON.stringify(performance, null, 2));
                                console.log('Performance report generated');
                                "
                            '''
                            archiveArtifacts artifacts: 'performance-report.json', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('üìä Quality Gates') {
            steps {
                script {
                    echo 'üéØ Evaluating quality gates'
                    
                    // Parse test results
                    def testResults = readJSON file: 'test-results/results.json'
                    def totalTests = testResults.stats.total
                    def passedTests = testResults.stats.passed
                    def failedTests = testResults.stats.failed
                    def passRate = (passedTests / totalTests) * 100
                    
                    echo """
                    üìà Test Results Summary:
                    ‚îú‚îÄ‚îÄ Total Tests: ${totalTests}
                    ‚îú‚îÄ‚îÄ Passed: ${passedTests}
                    ‚îú‚îÄ‚îÄ Failed: ${failedTests}
                    ‚îî‚îÄ‚îÄ Pass Rate: ${passRate.round(2)}%
                    """
                    
                    // Quality gate checks
                    if (passRate < 95 && env.BRANCH_NAME == 'main') {
                        error("‚ùå Quality gate failed: Pass rate ${passRate.round(2)}% is below 95% threshold for main branch")
                    }
                    
                    if (failedTests > 0 && params.TEST_SUITE == 'smoke') {
                        error("‚ùå Quality gate failed: Smoke tests must have 100% pass rate")
                    }
                    
                    echo "‚úÖ All quality gates passed!"
                }
            }
        }
        
        stage('üßπ Cleanup') {
            steps {
                script {
                    echo 'üßπ Cleaning up test environment'
                    sh '''
                        # Stop sample applications if running locally
                        if [ -f app.pid ]; then
                            kill $(cat app.pid) 2>/dev/null || true
                            rm app.pid
                        fi
                        
                        # Clean temporary files
                        npm run clean || true
                        
                        # Keep only essential artifacts
                        find test-results -name "*.webm" -size +10M -delete || true
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Calculate build metrics
                def buildDuration = currentBuild.duration
                def testResults = readJSON file: 'test-results/results.json'
                def passRate = (testResults.stats.passed / testResults.stats.total) * 100
                
                echo """
                üèÅ Build Complete:
                ‚îú‚îÄ‚îÄ Duration: ${buildDuration}ms
                ‚îú‚îÄ‚îÄ Pass Rate: ${passRate.round(2)}%
                ‚îú‚îÄ‚îÄ Browser: ${params.BROWSER}
                ‚îî‚îÄ‚îÄ Environment: ${params.ENVIRONMENT}
                """
            }
        }
        
        success {
            script {
                echo 'üéâ Build successful - sending notifications'
                
                // Slack notification for success
                slackSend(
                    channel: '#qa-automation',
                    color: 'good',
                    message: """
                    ‚úÖ *Playwright Tests PASSED!* üéâ
                    
                    üìä *Build Details:*
                    ‚Ä¢ Branch: `${env.BRANCH_NAME}`
                    ‚Ä¢ Build: `#${env.BUILD_NUMBER}`
                    ‚Ä¢ Browser: `${params.BROWSER}`
                    ‚Ä¢ Test Suite: `${params.TEST_SUITE}`
                    ‚Ä¢ Environment: `${params.ENVIRONMENT}`
                    
                    üìà *Reports:*
                    ‚Ä¢ <${env.BUILD_URL}Playwright_20Test_20Report|Test Report>
                    ‚Ä¢ <${env.BUILD_URL}allure|Allure Report>
                    
                    üöÄ Ready for deployment!
                    """,
                    teamDomain: 'your-workspace',
                    token: 'your-slack-token'
                )
                
                // Trigger deployment pipeline for main branch
                if (env.BRANCH_NAME == 'main') {
                    build job: 'deployment-pipeline', 
                          parameters: [string(name: 'VERSION', value: env.BUILD_NUMBER)]
                }
            }
        }
        
        failure {
            script {
                echo 'üí• Build failed - sending alerts'
                
                // Slack notification for failure
                slackSend(
                    channel: '#qa-automation',
                    color: 'danger',
                    message: """
                    ‚ùå *Playwright Tests FAILED!* üö®
                    
                    üìä *Build Details:*
                    ‚Ä¢ Branch: `${env.BRANCH_NAME}`
                    ‚Ä¢ Build: `#${env.BUILD_NUMBER}`
                    ‚Ä¢ Browser: `${params.BROWSER}`
                    ‚Ä¢ Test Suite: `${params.TEST_SUITE}`
                    ‚Ä¢ Environment: `${params.ENVIRONMENT}`
                    
                    üîç *Investigation:*
                    ‚Ä¢ <${env.BUILD_URL}console|Console Logs>
                    ‚Ä¢ <${env.BUILD_URL}Playwright_20Test_20Report|Test Report>
                    ‚Ä¢ <${env.BUILD_URL}artifact|Test Artifacts>
                    
                    üë• <@channel> Please investigate!
                    """,
                    teamDomain: 'your-workspace',
                    token: 'your-slack-token'
                )
                
                // Email notification for critical failures
                emailext(
                    subject: "‚ùå Playwright Tests Failed - Build #${env.BUILD_NUMBER}",
                    body: """
                    <h2>üö® Test Execution Failed</h2>
                    
                    <h3>Build Information:</h3>
                    <ul>
                        <li><strong>Branch:</strong> ${env.BRANCH_NAME}</li>
                        <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                        <li><strong>Browser:</strong> ${params.BROWSER}</li>
                        <li><strong>Test Suite:</strong> ${params.TEST_SUITE}</li>
                        <li><strong>Environment:</strong> ${params.ENVIRONMENT}</li>
                        <li><strong>Commit:</strong> ${env.GIT_COMMIT}</li>
                    </ul>
                    
                    <h3>Quick Links:</h3>
                    <ul>
                        <li><a href="${env.BUILD_URL}console">Console Logs</a></li>
                        <li><a href="${env.BUILD_URL}Playwright_20Test_20Report">Test Report</a></li>
                        <li><a href="${env.BUILD_URL}artifact">Test Artifacts</a></li>
                    </ul>
                    
                    <p>Please investigate and fix the failing tests.</p>
                    """,
                    mimeType: 'text/html',
                    to: "${env.CHANGE_AUTHOR_EMAIL}, qa-team@company.com, ${env.BRANCH_NAME == 'main' ? 'release-team@company.com' : ''}"
                )
                
                // Create JIRA ticket for critical failures on main branch
                if (env.BRANCH_NAME == 'main') {
                    jiraCreateIssue site: 'your-jira-site',
                                   issue: [
                                       fields: [
                                           project: [key: 'QA'],
                                           summary: "Critical: Playwright Tests Failed on Main Branch - Build #${env.BUILD_NUMBER}",
                                           description: """
                                           Automated test execution failed on main branch.
                                           
                                           Build: #${env.BUILD_NUMBER}
                                           Commit: ${env.GIT_COMMIT}
                                           
                                           Investigation required immediately.
                                           
                                           Links:
                                           - Console: ${env.BUILD_URL}console
                                           - Report: ${env.BUILD_URL}Playwright_20Test_20Report
                                           """,
                                           issuetype: [name: 'Bug'],
                                           priority: [name: 'Critical'],
                                           assignee: [name: 'qa-lead']
                                       ]
                                   ]
                }
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è Build unstable - some tests failed but build continued'
            
            slackSend(
                channel: '#qa-automation',
                color: 'warning',
                message: """
                ‚ö†Ô∏è *Playwright Tests UNSTABLE* 
                
                Some tests failed but build continued.
                Build: `#${env.BUILD_NUMBER}` | Branch: `${env.BRANCH_NAME}`
                
                <${env.BUILD_URL}Playwright_20Test_20Report|View Report>
                """,
                teamDomain: 'your-workspace',
                token: 'your-slack-token'
            )
        }
        
        cleanup {
            echo 'üßΩ Final cleanup'
            cleanWs()
        }
    }
}